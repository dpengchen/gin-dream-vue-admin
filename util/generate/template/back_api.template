package system

import (
	"dream-vue-admin/global"
	"dream-vue-admin/models/{{ .GenerateBasePath }}_model"
	"dream-vue-admin/server/{{ .GenerateBasePath }}_server"
	"dream-vue-admin/util/constants"
	"dream-vue-admin/util/http/response"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
)

// {{ .StructName }}Api {{ .TableComment }}接口
type {{ .StructName }}Api struct {
	server *{{ .GenerateBasePath }}_server.{{ .StructName }}Server
}

// New{{ .StructName }}Api 创建{{ .TableComment }}接口
func New{{ .StructName }}Api() *{{ .StructName }}Api {
	return &{{ .StructName }}Api{
		server: {{ .GenerateBasePath }}_server.New{{ .StructName }}Server(),
	}
}

// Create 创建{{ .TableComment }}
// @Summary 创建{{ .TableComment }}
// @Description 创建一个新的{{ .TableComment }}项
// @Tags {{ .TableComment }}管理
// @Accept json
// @Produce json
// @Param dict body {{ .GenerateBasePath }}_model.{{ .StructName }} true "{{ .TableComment }}信息"
// @Success 200 {object} response.Response{data={{ .GenerateBasePath }}_model.{{ .StructName }}}
// @Router /{{ .GenerateBasePath }}/{{ .FileName }} [post]
func (api *{{ .StructName }}Api) Create(c *gin.Context) {
	var reqData {{ .GenerateBasePath }}_model.{{ .StructName }}
	var err error
	if err = c.ShouldBindJSON(&reqData); err != nil {
		global.Log.Warnln("【{{ .TableComment }}-创建】解析绑定结构体失败：", err.Error())
		response.Fail(c, http.StatusBadRequest, constants.RespErrorMsgBadRequest)
		return
	}
	if err = api.server.Create(c, &reqData); err != nil {
		global.Log.Warnln("【{{ .TableComment }}-创建】数据库调用失败：", err.Error())
		response.FailWithInternalError(c, fmt.Sprint("创建{{ .TableComment }}失败：", err.Error()))
		return
	}
	response.Success(c, reqData)
}

// Remove 删除{{ .TableComment }}
// @Summary 删除{{ .TableComment }}
// @Description 根据ID列表删除{{ .TableComment }}项
// @Tags {{ .TableComment }}管理
// @Accept json
// @Produce json
// @Param ids body []uint true "{{ .TableComment }}ID列表"
// @Success 200 {object} response.Response
// @Router /{{ .GenerateBasePath }}/{{ .FileName }} [delete]
func (api *{{ .StructName }}Api) Remove(c *gin.Context) {
	var err error
	var ids []any

	err = c.ShouldBindJSON(&ids)
	if err != nil {
		global.Log.Warnln("【{{ .TableComment }}-删除】解析绑定结构体失败：", err.Error())
		response.Fail(c, http.StatusBadRequest, constants.RespErrorMsgBadRequest)
		return
	}

	if len(ids) == 0 {
		response.Fail(c, http.StatusBadRequest, constants.RespErrorMsgBadRequest)
		return
	}

	err = api.server.Remove(c, ids)
	if err != nil {
		global.Log.Warnln("【{{ .TableComment }}-删除】数据库调用失败：", err.Error())
		response.FailWithInternalError(c, fmt.Sprint("删除{{ .TableComment }}失败：", err.Error()))
		return
	}
	response.SuccessWithMsg(c, constants.RespRemoveSuccessMsg)
}

// Modify 修改{{ .TableComment }}
// @Summary 修改{{ .TableComment }}
// @Description 根据ID修改{{ .TableComment }}信息
// @Tags {{ .TableComment }}管理
// @Accept json
// @Produce json
// @Param id path string true "{{ .TableComment }}ID"
// @Param dict body {{ .GenerateBasePath }}_model.{{ .StructName }} true "{{ .TableComment }}信息"
// @Success 200 {object} response.Response
// @Router /{{ .GenerateBasePath }}/{{ .FileName }}/{id} [put]
func (api *{{ .StructName }}Api) Modify(c *gin.Context) {
	var err error
	var data {{ .GenerateBasePath }}_model.{{ .StructName }}
	var id = c.Param("id")
	if id == "" {
		global.Log.Warnln("【{{ .TableComment }}-修改】参数id为空")
		response.Fail(c, http.StatusBadRequest, constants.RespErrorMsgBadRequest)
		return
	}

	err = c.ShouldBindJSON(&data)
	if err != nil {
		global.Log.Warnln("【{{ .TableComment }}-修改】解析绑定结构体失败：", err.Error())
		response.Fail(c, http.StatusBadRequest, constants.RespErrorMsgBadRequest)
		return
	}

	err = api.server.Modify(c, id, &data)
	if err != nil {
		global.Log.Warnln("【{{ .TableComment }}-修改】数据库调用失败：", err.Error())
		response.FailWithInternalError(c, fmt.Sprint("修改{{ .TableComment }}失败：", err.Error()))
		return
	}

	response.SuccessWithMsg(c, constants.RespModifySuccessMsg)
}

// List 查询{{ .TableComment }}列表
// @Summary 查询{{ .TableComment }}列表
// @Description 根据条件查询{{ .TableComment }}列表
// @Tags {{ .TableComment }}管理
// @Accept json
// @Produce json
// @Param dictName query string false "{{ .TableComment }}名称"
// @Param page query int false "页码" default(1)
// @Param size query int false "每页数量" default(10)
// @Success 200 {object} response.Response{data=response.PageResult{list=[]{{ .GenerateBasePath }}_model.{{ .StructName }}}}
// @Router /{{ .GenerateBasePath }}/{{ .FileName }}/list [get]
func (api *{{ .StructName }}Api) List(c *gin.Context) {
	var err error
	var queryData {{ .GenerateBasePath }}_model.{{ .StructName }}Query
	err = c.ShouldBindQuery(&queryData)
	if err != nil {
		global.Log.Warnln("【{{ .TableComment }}-列表】解析绑定结构体失败：", err.Error())
	}
	list, total, err := api.server.List(&queryData)
	if err != nil {
		global.Log.Warnln("【{{ .TableComment }}-列表】数据库调用失败：", err.Error())
		response.FailWithInternalError(c, fmt.Sprint("获取{{ .TableComment }}列表失败：", err.Error()))
		return
	}

	response.SuccessWithList(c, list, total, &queryData.BaseQuery)
}

// GetById 获取{{ .TableComment }}详情
// @Summary 获取{{ .TableComment }}详情
// @Description 根据ID获取{{ .TableComment }}详情
// @Tags {{ .TableComment }}管理
// @Accept json
// @Produce json
// @Param id path string true "{{ .TableComment }}ID"
// @Success 200 {object} response.Response{data={{ .GenerateBasePath }}_model.{{ .StructName }}}
// @Router /{{ .GenerateBasePath }}/{{ .FileName }}/{id} [get]
func (api *{{ .StructName }}Api) GetById(c *gin.Context) {
	var err error
	var data *{{ .GenerateBasePath }}_model.{{ .StructName }}
	var id = c.Param("id")
	if id == "" {
		global.Log.Warnln("【{{ .TableComment }}-详情】参数id为空")
		response.Fail(c, http.StatusBadRequest, constants.RespErrorMsgBadRequest)
		return
	}

	data, err = api.server.GetById(id)
	if err != nil {
		global.Log.Warnln("【{{ .TableComment }}-详情】数据库调用失败：", err.Error())
		response.FailWithInternalError(c, fmt.Sprint("获取{{ .TableComment }}详情失败：", err.Error()))
		return
	}

	response.Success(c, data)
}