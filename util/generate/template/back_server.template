package {{ .GenerateBasePath }}_server

import (
	"dream-vue-admin/global"
	"dream-vue-admin/models/v1/{{ .GenerateBasePath }}_model"
	"dream-vue-admin/util/constants"
	"errors"
	"fmt"
	"time"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

type {{ .StructName }}Server struct {
}

func New{{ .StructName }}Server() *{{ .StructName }}Server {
	return &{{ .StructName }}Server{}
}

// Create 创建{{ .TableComment }}
func (s *{{ .StructName }}Server) Create(c *gin.Context, reqData *{{ .GenerateBasePath }}_model.{{ .StructName }}) error {
	//设置创建时间
	var now = time.Now()
	reqData.CreateTime = &now
	reqData.CreateBy = c.GetUint(constants.GinContextLoginUserIdKey)
	return global.Db.Create(reqData).Error
}

// Remove 删除{{ .TableComment }}
func (s *{{ .StructName }}Server) Remove(c *gin.Context, ids []any) error {
	return global.Db.Where("id in ?", ids).Delete(&{{ .GenerateBasePath }}_model.{{ .StructName }}{}).Error
}

// Modify 修改{{ .TableComment }}
func (s *{{ .StructName }}Server) Modify(c *gin.Context, id string, data *{{ .GenerateBasePath }}_model.{{ .StructName }}) error {
	var err error
	var count int64
	data.UpdateBy = c.GetUint(constants.GinContextLoginUserIdKey)
	now := time.Now()
	data.UpdateTime = &now

    {{ if .PrivateData }}
    userId := c.GetUint(constants.GinContextLoginUserIdKey)
    {{end}}

	err = global.Db.Model(&{{ .GenerateBasePath }}_model.{{ .StructName }}{}).Where("id = ?", id){{ if .PrivateData }}.Where("create_by = ?", userId){{end}}.Count(&count).Error
	if errors.Is(err, gorm.ErrRecordNotFound) || count <= 0 {
		return errors.New("数据不存在，不可修改！")
	}
	if err != nil {
		return err
	}

	return global.Db.Model(&{{ .GenerateBasePath }}_model.{{ .StructName }}{}).Where("id = ?", id).Select("*").Omit("id", "create_by", "create_time", "delete_by", "delete_time").Updates(data).Error
}

// List 查询列表
func (s *{{ .StructName }}Server) List({{if .PrivateData}}c *gin.Context, {{end}}queryData *{{ .GenerateBasePath }}_model.{{ .StructName }}Query) ([]{{ .GenerateBasePath }}_model.{{ .StructName }}, *int64, error) {
	var list []{{ .GenerateBasePath }}_model.{{ .StructName }}
	var total int64
	var err error
	db := global.Db.Model(&{{ .GenerateBasePath }}_model.{{ .StructName }}{})
    {{ if .PrivateData }}
    userId := c.GetUint(constants.GinContextLoginUserIdKey)
    {{end}}

	//条件查询
    {{ range $val := .GenerateColumns }}{{ if $val.IsQuery }}
    // {{ $val.ColumnLabel}}
    if (queryData.{{ $val.StructName }} != null){
        db = db.Where("{{ $val.SqlName }} = ?", queryData.{{ $val.StructName }})
    }
    {{end}}{{end}}


	//只能查询到没有删除的数据，只有在私有数据可以进行
	err = db{{ if .PrivateData }}.Where("create_by = ?", userId){{end}}.Count(&total).Error
	if err != nil {
		return nil, nil, err
	}

	err = db{{ if .PrivateData }}.Where("create_by = ?", userId){{end}}.Offset((queryData.Page - 1) * queryData.Size).Order("id DESC").Find(&list).Error
	if err != nil {
		return nil, nil, err
	}

	return list, &total, nil
}

// GetById 获取{{ .TableComment }}通过ID
func (s *{{ .StructName }}Server) GetById({{if .PrivateData}}c *gin.Context, {{end}}id string) (*{{ .GenerateBasePath }}_model.{{ .StructName }}, error) {
	var err error
	var data {{ .GenerateBasePath }}_model.{{ .StructName }}
    {{ if .PrivateData }}
    userId := c.GetUint(constants.GinContextLoginUserIdKey)
    {{end}}
	err = global.Db{{ if .PrivateData }}.Where("create_by = ?", userId){{end}}.First(&data, id).Error
	if err != nil {
		return nil, err
	}
	return &data, err
}
